
# Lifecycle call backs 
    -  Lifecycle callbacks are methods that get called at different stages of a custom element's lifecycle
    -  These callbacks allow you to perform actions or logic at specific points in the lifecycle of a web component. 

  There are several lifecycle callbacks available for Web Components:

      1) constructor            - 
          - First callback that gets invoked when an instance of the custom element is created.
          - It's used for initializing properties, setting up initial state, and attaching a shadow DOM.

      2) connectedCallback
          - This callback is called when the custom element is inserted into the DOM.
          - It's a good place to set up event listeners, fetch data, or perform other actions that need to happen when the element is added to the document.
      
      3) disconnectedCallback
          - This callback is called when the custom element is removed from the DOM
          - It's a good place to clean up resources, remove event listeners, or perform other cleanup operations.

      4) attributeChangedCallback
          - This callback is invoked when one of the custom element's "observed attributes" changes
          - You can specify which attributes to observe by using the "observedAttributes static getter". 
          - This is useful for responding to attribute changes and updating the component's internal state accordingly.

      5) adoptedCallback
          - This callback is called when the custom element is moved to a new document

Here's an example of how you might define a simple Web Component with some of these lifecycle callbacks:

javascript:

       class MyElement extends HTMLElement 
            {
                          constructor() {
                            super();
                            // Initialize properties or set up initial state
                          }
              
                          connectedCallback() {
                            // Called when the element is inserted into the DOM
                            // Set up event listeners, fetch data, etc.
                          }
              
                          disconnectedCallback() {
                            // Called when the element is removed from the DOM
                            // Clean up resources, remove event listeners, etc.
                          }


                          static get observedAttributes() 
                                    {
                                      return ['my-attribute'];
                                    }

                            attributeChangedCallback(name, oldValue, newValue) {
                              // Called when observed attributes change
                              // Update internal state based on attribute changes
                            }
              
                            
               }
              
              customElements.define('my-element', MyElement);
